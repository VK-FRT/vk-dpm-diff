import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

description = 'DPM Diff command line interface'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("com.github.jengelman.gradle.plugins:shadow:${shadowPluginVersion}")
    }
}


apply plugin: 'com.github.johnrengelman.shadow'


dependencies {
    shadowed libs.kotlinStdLib
    shadowed libs.kotlinReflect
    shadowed libs.joptSimple
    shadowed(project(':diff-model'))
    shadowed(project(':diff-report-generator'))
    shadowed(project(':diff-spr-output'))

    testCompile libs.kotlinStdLib
    testCompile libs.kotlinStdLib
    testCompile libs.junitJupiterApi
    testCompile libs.junitJupiterParams
    testCompile libs.assertjCore
    testCompile libs.apachePoi
    testCompile libs.apachePoiOoxml
    testCompile(project(':diff-model'))

    testRuntimeOnly libs.junitJupiterEngine
}


def lookupGitShortHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}


def lookupGitOriginUrl = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'config', '--get', 'remote.origin.url'
        standardOutput = stdout
    }
    def originUrl = stdout.toString().trim()

    try {
        new URI(originUrl)
    } catch (URISyntaxException ex) {
        throw new IllegalArgumentException("GIT origin URL ($originUrl) not a valid JAVA URI (perhaps it is a SSH URL)")
    }

    return originUrl
}


jar {
    manifest {
        attributes(
                'Main-Class'            : 'fi.vm.dpm.diff.cli.MainKt',
                'Build-Timestamp'       : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(OffsetDateTime.now()),
                'Build-Revision'        : lookupGitShortHash(),
                'Build-OriginUrl'       : lookupGitOriginUrl(),
                'Build-Jdk'             : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'              : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
        )
    }
}


jar.enabled = false
jar.dependsOn shadowJar


shadowJar {
    classifier = null
    configurations = [project.configurations.shadowed]
}


artifacts {
    archives shadowJar
}


