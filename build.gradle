description = 'DPM Diff'

apply from: "gradle/dependencies.gradle"

buildscript {
    repositories {
        mavenCentral()
        jcenter()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }


    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinPluginVersion}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:${spotlessPluginVersion}"
        classpath "com.adarshr:gradle-test-logger-plugin:${gradleTestLoggerPluginVersion}"
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}


allprojects { subproj ->
    apply plugin: 'kotlin'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'com.adarshr.test-logger'

    group = 'fi.vm.dpm.diff'

    repositories {
        mavenCentral()
        jcenter()
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            jvmTarget = '1.8'
            apiVersion = '1.3'
            languageVersion = '1.3'
        }
    }

    test {
        filter {
            setFailOnNoMatchingTests(false)
        }
    }


    testlogger {
        theme 'standard'
        showExceptions true
        showStackTraces true
        showFullStackTraces false
        showCauses true
        slowThreshold 1000
        showSummary true
        showSimpleNames false
        showPassed true
        showSkipped true
        showFailed true
        showStandardStreams true
        showPassedStandardStreams false
        showSkippedStandardStreams false
        showFailedStandardStreams true
        }
}


configure(rootProject) {
    jar.enabled = false
    uploadArchives.enabled = false
}


subprojects { subproj ->
    apply plugin: 'com.diffplug.gradle.spotless'

    configurations {
        shadowed
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'org.jetbrains.kotlin' && requested.name == 'kotlin-reflect') {
                details.useVersion "$versions.kotlin"
            }
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin/'
        test.java.srcDirs += 'src/test/kotlin/'
        main.compileClasspath += configurations.shadowed
        test.runtimeClasspath += configurations.shadowed
    }


    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
    }

    spotless {

        java {
            trimTrailingWhitespace()
            endWithNewline()
        }

        kotlin {
            ktlint("${ktlintVersion}")
            trimTrailingWhitespace()
            endWithNewline()
        }
    }
}
